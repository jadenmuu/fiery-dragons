package com.example.fierydragons.controllers;

import com.example.fierydragons.services.PlayerManager;
import javafx.beans.binding.Bindings;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TextField;

import java.io.IOException;
import java.time.LocalDate;

/**
 * The SetPlayerInfoController class is responsible for setting up player information including names and dates of birth.
 * @author: Taken from Jaden's Sprint 2
 */
public class SetPlayerInfoController extends BaseController {

    private int totalPlayerCount; // Holds the total number of players to be set up.

    private static int currentPlayer = 1; // Static variable to keep track of which player's info is being entered.

    @FXML
    private TextField textField; // TextField for entering player names.

    @FXML
    private DatePicker dobField; // DatePicker for entering player dates of birth.

    @FXML
    private Button confirmButton; // Button to confirm the entry of each player's info.

    /**
     * Initialises SetPlayerInfoController.
     * Sets up bindings and prompt texts.
     */
    @FXML
    private void initialize() {
        // Disable the confirm button if the text field is empty or the date of birth is not set.
        confirmButton.disableProperty().bind(textField.textProperty().isEmpty());
        confirmButton.disableProperty().bind(Bindings.createBooleanBinding(
                        () -> dobField.getValue() == null,
                        dobField.valueProperty()
                )
        );
        // Set prompt texts for the TextField and DatePicker.
        textField.setPromptText("Enter Player " + currentPlayer + " Name");
        dobField.setPromptText("Enter Player " + currentPlayer + " Date of Birth");
    }

    /**
     * Handles clicks on the confirm button.
     * @param event The ActionEvent generated by clicking the "Confirm" button.
     * @throws IOException If an error occurs during navigation to the main game board.
     */
    @FXML
    private void onConfirmButtonClick(ActionEvent event) throws IOException {
        String playerName = textField.getText();
        LocalDate dateOfBirth = dobField.getValue();

        // Adds a new player using the PlayerManager service.
        PlayerManager.getInstance().createPlayer(playerName, dateOfBirth);

        // Check if more players need to be configured.
        if (currentPlayer < totalPlayerCount) {
            currentPlayer++; // Increment to set up the next player.
            textField.clear(); // Clear the text field for the next player's name.
            dobField.setValue(null); // Clear the date picker for the next player's date of birth.
            // Update prompt texts with the current player's index.
            textField.setPromptText("Enter Player " + currentPlayer + " Name");
            dobField.setPromptText("Enter Player " + currentPlayer + " Date of Birth");
        } else {
            currentPlayer = 1; // Reset the player index.
            switcher.switchScene(event, this.getClass(), "enter-card-square-info-view.fxml"); // Navigate to the card and square info view.
        }
    }

    /**
     * Handles clicks on the back button.
     * @param event The ActionEvent generated by clicking the "Back" button.
     * @throws IOException If an error occurs during navigation back to the player selection view.
     */
    @FXML
    private void onBackButtonClick(ActionEvent event) throws IOException {
        classInstance = getClass();
        switcher.switchScene(event, classInstance, "select-players-view.fxml"); // Navigate back to the select player view.
    }

    /**
     * Sets the total number of players as determined by the previous selection.
     * @param playerCount The total number of players.
     */
    public void setPlayerCount(int playerCount) {
        this.totalPlayerCount = playerCount;
    }
}
